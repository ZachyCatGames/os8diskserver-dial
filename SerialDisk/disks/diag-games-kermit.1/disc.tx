
		FIELD  SERVICE  DIAGNOSTIC  SYSTEM   ...  VERSION 8.03

			R E L E A S E      N O T E S


	  THE FOLLOWING INFORMATION IS MEANT AS A GUIDE TO ASSIST YOU IN USING
	THE DIAGNOSTIC SYSTEM AND IN PERFORMING SOME SIMPLE FILE MAINTENENCE AND
	MANIPULATION. IT IS NOT MEANT TO BE A COURSE IN OS-8. FOR MORE DETAILED
	INFORMATION ON OS-8, THE FOLLOWING REFERENCE MANUALS ARE SUGGESTED:

		DEC-S8-OSHBA-A-D	-	OS/8 HANDBOOK
		DEC-S8-OSHBA-A-DN4	-	OS/8 HANDBOOK UPDATE
		DEC-S8-OSRNA-B-D	-	OS/8  V3D SYSTEM RELEASE NOTES
		DEC-S8-OS78A-A-D	-	OS/78 USER'S MANUAL
		DEC-S8-OSSMB-A-D	-	OS/8 SOFTWARE SUPPORT MANUAL


1)	  THE MAIN PURPOSE OF THIS SYSTEM IS PROVIDE A MEANS OF LOADING AND 
	RUNNING DIAGNOSTIC PROGRAMS THAT ARE LOCATED ON THE DISTRIBUTION MEDIUM
	(DISCPAC, FLOPPY, DECTAPE). THEY ARE IDENTIFIED BY A UNIQUE SET OF UP TO
	SIX (6) CHARACTERS (EX: DHRKCG) AND A TWO (2) CHARACTER EXTENSION (.DG).
	THIS SYSTEM ALWAYS USES THE EXTENSION ".DG" TO IDENTIFY A DIAGNOSTIC
	PROGRAM.


	  TO RUN A DIAGNOSTIC PROGRAM, ONE TYPES:

		.R PROGNAME.DG			(WHERE "PROGNAME" IS THE NAME OF
						 THE DIAGNOSTIC TO BE RUN       )

	  FOR EXAMPLE, TO RUN THE RK8E DATA RELIABILITY TEST:

		.R DHRKCG.DG

2)	  ONCE THE DIAGNOSTIC HAS BEEN LOADED, IT WILL RUN NORMALLY. THAT IS, AS
	THOUGH IT HAD BEEN LOADED FROM PAPER TAPE. IT SHOULD BE NOTED THAT MANY
	(INDEED, MOST) OF THE NEWER DIAGNOSTICS HAVE BEEN AMMENDED TO IMPLIMENT
	A "SOFTWARE SWITCH REGISTER" FOR THE BENIFIT OF THOSE WORKING WITH A
	PDP-8A SYSTEM THAT HAS NO FRONT PANEL SWITCHES. IN THESE CASES, THE 
	PROGRAM WILL IDENTIFY ITSELF, THEN PRINT:

			SR=0000

	AND WAIT FOR THE USER TO INPUT THE DESIRED SWITCH REGISTER VALUE. IN 
	THIS MANNER, THE LACK OF HARDWARE SWITCHES IS CIRCUMVENTED.

	  ON THESE DIAGNOSTICS, IT IS USUALLY POSSIBLE TO DISABLE THE SOFTWARE
	SWITCH REGISTER (IF, FOR EXAMPLE, YOU ARE USING A PDP-8E) AND USE THE
	HARDWARE SWITCHES INSTEAD. THE FOLLOWING LOCATIONS ARE STANDARD:


					CONSOLE
		LOC		SOFTWARE	HARDWARE
		---		--------	--------

		21		  0000		  4000
		22		  0400		  0000


				-  1  -


3)	SAVING YOUR OWN DIAGNOSTICS FROM PAPER TAPES

		- PLACE NEW DIAGNOSTIC IN PAPER TAPE READER
		- TYPE:
			.LOAD PTR:
			^			-	TYPE A <C.R.>
			.SAVE SYS PROGNAME.DG	-	WHERE "PROGNAME" IS A
							SIX (6) CHARACTER NAME
							FOLLOWED BY ".DG"


	THIS DIAGNOSTIC MAY NOW BE RUN BY TYPING:

		.R PROGNAME.DG





4)	  THERE IS A PROGRAM CALLED "CONVRT.SV" THAT ALLOWS ONE TO PERFORM
	THE OPPOSITE OF STEP #3. A PAPER TAPE MAY BE GENERATED FROM ANY FILE
	THAT HAS A ".SV" OR ".DG" EXTENSION. THE TAPE IS PRODUCED FROM A HIGH
	SPEED PUNCH BY TYPING:

		.R CONVRT
		*PROGNAME.EX		-	WHERE "PROGNAME" IS THE PROGRAMS
						NAME AND ".EX" IS THE EXTENSION.
		*^C			-	TYPE A <CTRL> C TO EXIT.


	  THIS TAPE IS A BINARY TAPE AND CAN BE LOADER VIA BINARY LOADER ON ANY
	FAMILY OF 8 MACHINE USING STANDARD BINARY LOADING TECHNIQUES.


	  N O T E	-	IF YOU TRY TO USE THIS PROGRAM ON ANYTHING BUT
	  -------		A ".SV" OR ".DG" PROGRAM, YOU WILL GET A LOT OF
				USELESS JUNK !




5)	  YOU MAY USE AN OS-8 FEATURE KNOWN AS ODT (OCTAL DEBUGGING TECHNIQUE)
	TO INSTALL PERMINANT PATCHES OR M.C.N'S TO ANY ".SV" OR ".DG" PROGRAM.
	THERE IS AN EXPLAINATION OF ODT IN THE OS-8 HANDBOOK ON PAGE 1-113.


		.GET SYS PROGNAME.EX
		.ODT

		     (MAKE NECESSARY CHANGES)

		^C			-	<CTRL> C

		.SAVE SYS PROGNAME.EX	-	TO RESAVE THE MODIFIED PROGRAM
							PROGRAM AGAIN.




				-  2  -
6)	PRINTING DIRECTORYS

		ON TTY	-	.DIR		( 1 COLUMN WIDE WITH DATES )
				.DIR/F=5	( 5 COLUMNS WIDE BUT NO DATES )
		ON LPT	-	.DIR LPT:</E=N	( WHERE N = NUMBER OF COLUMNS )


	OF "B" SIDE OF DISK

		ON LPT	-	.DIR LPT:<RKB0:/E=N

	OF ENTIRE DISK


			.DIR LPT:<SYS:,RKB0:/E=4







	N O T E		-	AT THIS TIME, A NOTE ON THE "SIDES" OF A
	-------			DISK IS IN ORDER. THE RK05 PLATTER IS BROKEN UP
				INTO TWO (2) LOGICAL DEVICES BY OS-8. THESE ARE
				CALLED "RKA0" & ""RKB0" (FOR DRIVE 0). IT
				IS INCORRECT TO ASSUME THAT RKA0 IS ON ONE
				SIDE OF THE PLATTER AND RKB0 IS ON THE OTHER.
				ACTUALLY, "RKA0" IS THE FIRST 6250 (DECIMAL)
				SECTORS AND "RKB0" IS THE NEXT 6250 SECTORS.
				A LOOK AT THE HARDWARE SHOWS THAT AFTER THE
				SECTOR COUNTER OVERFLOWS, THE HEADS SWITCH
				(TO THE OTHER SURFACE). WHEN THE COUNTER OVERFLOWS
				AGAIN, THE HEADS SWITCH BACK AND MOVE IN ONE
				CYLINDER.
				THEREFORE, EVEN THOUGH WE (WITH MYSELF AS A 
				PRIME OFFENDER) CALL THEM "SIDES"; THEY ARE
				NOT. IF YOU FIND THIS HARD TO SWALLOW, DO A
				DIRECTORY LISTING OF "RKB0" WITH THE COVERS
				OFF AND SEE WHERE THE HEADS GO !


















				-  3  -
7)	THE "SET" COMMAND

		THE CCL COMMAND ".SET" CAN BE USED TO INITIALIZE VARIOUS DEVICE
	HANDLER PARAMETERS FOR THE SPECIFIC HARDWARE CONFIGURATION. THE MOST USED
	EXAMPLE OF THIS IS WITH THE TTY HANDLER. ONE CAN, FOR EXAMPLE, TELL THE
	OS-8 SYSTEM THAT YOU HAVE A VT50/52 SCOPE, 12/24 LINES PER SCREEN, ETC.
	THE SAME CAN BE DONE WITH THE LINE PRINTER HANDLER. FOR MORE DETAILED
	INFORMATION THAN FOLLOWS, REFERENCE THE OS78 HANDBOOK OR THE OS-8 HAND-
	BOOK UPDATE (V3D).
		SOME SPECIFIC EXAMPLES ARE:

		.SET TTY SCOPE		-	CAUSES A RUBOUT TO ACTUALLY ERASE
						THE CHARACTER FROM THE SCREEN.

		.SET TTY NO SCOPE	-	CAUSES THE RUBOUT TO ECHO THE 
						CHARACTER/ SLASH COMBINATION.

		.SET TTY HEIGHT 12	-	TELLS THE SOFTWARE YOU HAVE A 12 
						LINE SCOPE

		.SET TTY HEIGHT 24	-	A VT52 SCOPE
	
		.SET TTY PAUSE		-	CAUSES THE OUTPUT TO THE SCOPE TO
						PAUSE EVERY "HEIGHT" LINES FOR
						EASE OF READING

		.SET SYS INIT		-	CAUSES THE COMMAND FILE "INIT.CM"
						TO BE EXECUTED UPON BOOT-UP.

		.SET SYS NO INIT	-	NEGATES THE ABOVE

	THIS SYSTEM IS SET AS FOLLOWS:

		SYS INIT ; SCOPE ; PAUSE ; HEIGHT 24

	NOTES ON SET:

		IF YOU ARE RUNNING "BUILD.SV" BE SURE TO ".SET SYS NO INIT" BEFOR
	     RUNNING THE PROGRAM. IF YOU DON'T, AND YOU TYPE  ".SA SYS BUILD" AFTER
	    THE PROGRAM, IT WILL NOT BE SAVED PROPERLY.

		IF YOU ARE BUILDING A DECTAPE SYSTEM, ".SET SYS NO INIT" OR EVERY
	    TIME YOU BOOT THE TAPE, IT WILL WIND A LOT OF TAPE AS IT READS IN ALL
	    THE NECCESSARY OVERLAYS.

















				-  4  -
8)	BATCH STREAMS

	  THERE ARE SEVERAL BATCH STREAMS (.BI) ON THE SYSTEM THAT ARE USED TO
	MAKE BACKUPS,OTHER DIAGNOSTIC MEDIUMS, ETC.  IN ORDER TO RUN THESE, THE
	SYSTEM MUST HAVE AT LEAST 12K OF MEMORY. THEY ARE AS FOLLOWS:


		.SU BACKUP	-	MAKES AN EXACT COPY OF YOUR OS-8 DISK
		.SU CUSPAK	-	MAKES A CUSTOMERS DIAGNOSTIC DISK
		.SU BOOK	-	PRINTS OUT THESE TEXT FILES
		.SU FLOP1,2,&3	-	MAKE DIAGNOSTIC FLOPPYS
		.SU FLOPX8	-	MAKE A DECX8 FLOPPY


	  IT IS IMPORTANT TO REMEMBER THAT IF YOU ARE GOING TO LEAVE A DIAGNOSTIC
	PACK ON SITE, USE THE BATCH STREAM ".SU CUSPAK" TO CREATE IT. THERE MAY
	SOFTWARE ON YOUR PERSONEL PACK THAT WE DO NOT WANT GIVEN AWAY!


================================================================================
=                                                                              =
=                                                                              =
=	YOU MUST REMEMBER THAT THIS DIAGNOSTIC SYSTEM RUNS UNDER OS-8          =
=	WHICH IS A PRODUCT THAT DIGITAL  S E L L S  TO CUSTOMERS FOR A         =
=       CONSIDERABLE AMOUNT OF MONEY  ...  IT IS NOT IN OUR BEST INTEREST      =
=     	TO LEAVE COPIES OF IT LAYING AROUND FOR FREE.  THE VERSION THAT        =
=	IS ON A PACK CREATED WITH THE BATCH STREAM   ".SU CUSPAK"  IS A        =
=	STRIPPED DOWN VERSION WITH ONLY THE MONITOR AND A FEW UTILITY          =
=	FUNCTIONS LEFT ON IT.                                                  =
=                                                                              =
=		P L E A S E   USE THE BATCH STREAM FOR CREATING ON-SITE        =
=	DIAGNOSTIC PACKS. DO NOT USE ".SU BACKUP" TO MAKE A CUSTOMER PACK !    =
=                                                                              =
=                                                                              =
================================================================================




9)	SYSTEM HEADS


	  THE FILES THAT HAVE THE EXTENSIONS OF ".SY" ARE COPIES OF OS-8 SYSTEM
	AREA HEADS FOR VARIOUS HARDWARE CONFIGURATIONS. THESE ARE USED BY THE
	BATCH STREAMS BUT MAY BE USED MANUALLY TO CREATE A OS-8 SYSTEM FOR A 
	PARTICULAR HARDWARE CONFIGURATION.

	  EXAMPLES OF THIS ARE:

		RK8E.SY		-	RK8E SYSTEM AREA
		RKS8E.SY	-	FOR A CSS OR LCS RKS8E CONTROLLER
		RX01.SY		-	FLOPPY DISK
		TD8E.SY		-	TD8E DECTAPE
		TC08.SY		-	TC01 - TC08 DECTAPE CONTROLLER

	  THIS TECHNIQUE MAY BE UNDERSTOOD BY REFERENCING THE PIP OPTION  /Y.

	EX:	RECOVER AN RK8E SYS HEAD		PUT A HEAD ON A NEW DECTAPE

		.R PIP					.R PIP
		*SYS:<SYS:RK8E.SY/Y			*DTA0:<SYS:TD8E.SY/Y/Z

				-  5  -



10)	THE FOLLOWING CONVENTIONS ARE ADHERED TO IN THIS SYSTEM


		- EXTENSIONS:

			.SV	-	SYSTEM PROGRAMS
			.BN	-	BINARY FILES	(USUALLY DECX8 MODULES)
			.DG	-	DIAGNOSTIC PROGRAMS
			.SY	-	SYSTEM HEADS
			.BI	-	BATCH CONTROL FILES
			.HL	-	HELP FILES
			.TX	-	TEXT FILES  (SUCH AS THIS FILE)
			.BA	-	BASIC SOURCE FILES
			.X8	-	A CUSTOMIZED DECX8 SYSTEM EXERCISER


		- DEVICES:

			SYS:	-	THE SYSTEM DEVICE
			DSK:	-	THE DEFAULT DEVICE (USUALLY SYS:)
			RKA0:	-	"A" SIDE OF RK05 DRIVE #0
			RKB0:	-	"B" SIDE OF RK05 DRIVE #0
			TTY:	-	CONSOLE TELETYPE
			LPT:	-	LINE PRINTER
			LPQ:	-	HIGH QUALITY  (DIABLO)  PRINTER
			PTR:	-	PAPER TAPE READER
			PTP:	-	PAPER TAPE PUNCH
			DTA0:	-	DECTAPE DRIVE #0
			DTA1:	-	DECTAPE DRIVE #1
			RXA0:	-	RX01 FLOPPY DRIVE #0
			RXA1:	-	RX01 FLOPPY DRIVE #1


		- PACK BUILD CONFIGURATION

			PRESENTLY THIS PACK (RK8E/RK05) IS CONFIGURED TO
			SUPPORT THE FOLLOWING HARDWARE

			RK8E	-	THE SYSTEM DEVICE (SYS:/DSK:)
			RK05	-	NON-SYSTEM UNITS RKA0:,RKB0:,RKA1:,RKB1:
			TD8E	-	NON-SYSTEM UNITS DTA0:,DTA1:
			RX01	-	NON-SYSTEM UNITS RXA0:,RXA1:
			KL8E	-	CONSOLE TERMINAL  (TTY:)
			LPSV	-	LINE PRINTER  (LPT:)
			PC8E	-	READER / PUNCH  (PTR:/PTP:)

			SHOULD YOUR APPLICATION REQUIRE, IT MAY BE NECCESARY FOR
			YOU TO RUN THE BUILD PROGRAM BY TYPING:

				.RUN SYS BUILD

			TO CHANGE THE HARDWARE CONFIGURATION. INFORMATION ON 
			THIS PROGRAM IS ON PAGE 2-34 OF THE OS/8 HANDBOOK.

			AN EXAMPLE OF A NEED TO DO THIS WOULD BE IF YOUR SYSTEM
			HAD A TC08 DECTAPE INSTEAD OF A TD8E. YOU WOULD HAVE TO
			DELETE THE TD8E HANDLERS , INSERT THE TC08 HANDLERS, 
			THEN REBOOT THE SYSTEM. ONLY AFTER THIS COULD YOU ACCESS
			THE DECTAPES.


				-  6  -


11)			O S / 8   N O T E S
			-------------------


	  OS/8  CONSISTS OF AN EXECUTIVE AND A LIBRARY OF SYSTEM PROGRAMS WHICH
	RESIDE ON A TAPE,DISK, OR FLOPPY DISKETTE UNIT CALLED A "SYSTEM DEVICE".
	THE EXECUTIVE SUPERVISES THE OVERALL PROGRAM PROCESSING AND CONSISTS OF
	THE FOLLOWING FOUR MAJOR COMPONENTS:

		- KEYBOARD MONITOR	(KMON)
		- COMMAND DECODER	(CD)
		- DEVICE HANDLERS
		- USER SERVICE ROUTINE	(USR)



	  THE KEYBOARD MONITOR PROVIDES COMMUNICATIONS BETWEEN THE USER AND THE
	OS/8 EXECUTIVE. IT ACCEPTS COMMANDS FROM THE CONSOLE TERMINAL TO CREATE
	LOGICAL NAMES FOR DEVICES, TO RUN SYSTEM AND USER PROGRAMS, TO SAVE
	PROGRAMS AND TO CALL THE DEBUGGING PROGRAM (ODT).

	  THE KEYBOARD MONITOR COMMANDS ARE:

		ASSIGN		-	ASSIGNS A NEW, USER DEFINED DEVICE NAME
					TO A PERMINANT DEVICE.

		DEASSIGN	-	RESTORES PERMINANT DEVICE NAMES

		GET		-	LOADS CORE IMAGE FILES INTO MEMORY FROM 
					A DEVICE

		START		-	STARTS EXECUTION OF A PROGRAM ALREADY IN
					MEMORY

		RUN		-	LOADS CORE IMAGE FILES INTO MEMORY FROM
					A DEVICE AND STARTS EXECUTION

		R		-	LOADS CORE IMAGE FILES INTO MEMORY FROM
					THE SYSTEM DEVICE AND STARTS EXECUTION

		SAVE		-	CREATES CORE IMAGE PROGRAMS ON A DEVICE

		ODT		-	INVOKES THE DEBUGGING TECHNIQUE

		DATE		-	SETS THE SYSTEM DATE


		  THE ROOT SEGMENT OF THE MONITOR RESIDES PERMINENTLY IN MEMORY
		AND OCCUPIES 256 WORDS. WHENEVER THEY ARE NEEDED, THE COMMAND
		DECODER, THE KEYBOARD MONITOR, THE USR, AND ODT ARE BROUGHT INTO
		MEMORY IN A SERIES OF OVERLAYS WHILE THE CONTENTS OF THE MEMORY 
		USED IS SWAPPED OUT TO A TEMPORARY AREA ON THE SYSTEM DEVICES
		SCRATCH AREA.




				-  7  -


	  THE COMMAND DECODER IS CALLED WHEN A SYSTEM PROGRAM NEEDS ADDITIONAL
	INFORMATION FROM THE OPERATOR CONCERNING FILES TO BE ACTED UPON OR 
	DEVICES TO BE USED. YOU ARE IN THE COMMAND DECODER WHENEVER THE PROMPT
	CHARACTER " * " IS ISSUED.

	  UNDERSTANDING THE COMMAND DECODER LINE FORMAT IS PROBABLY THE MOST 
	IMPORTANT STEP TO SUCCESSFUL USAGE OF THE OS-8 OPERATING SYSTEM. IT
	IS AS FOLLOWS:


		*OUTDEV:OUTFIL.EX<INDEV:INFILE.EX,INDEV:INFILE.EX/SW1/SW2=N


	TO TRANSLATE ...

	OUTDEV:		-	THE OUTPUT DEVICE	(SYS:,RKB0:,DTA0:,LPT:)
	OUTFIL.EX	-	THE NAME OF THE OUTPUT FILE & THE EXTENSION

	INDEV:		-	THE INPUT DEVICE	(SYS:,RKB0:,PTR:,RXA0:)
	INFILE.EX	-	THE NAME OF THE INPUT FILE & THE EXTENSION

	SW?		-	AN OPTIONAL SWITCH ... DIFFERENT FOR EACH PROGRAM
	=N		-	NUMERICAL VALUE  (IE: IN DIRECT = N# OF COLUMNS)

	  THERE MAY BE 0-3 INPUT FILES, 0-9 OUTPUT FILES, 0-3 OPTION SWITCHS, 
	DEPENDING ON THE REQUIREMENTS OF THE INDIVDUAL PROGRAM. IN SEVERAL 
	PROGRAMS, IT IS NOT NECCESSARY TO SPECIFY EVERY DETAIL ... CERTAIN
	PROGRAMS HAVE DEFAULT VALUES FOR DEVICES, SWITCHES, ETC.
	THE ONLY WAY TO BE SURE OF THIS IS TO KNOW THE PROGRAM YOU ARE WORKING
	WITH.

	  AGAIN, THE VALUE OF LEARNING THE COMMAND DECODER FORMAT CANNOT BE OVER
	STRESSED ... THE SAME BASIC FORMAT IS USED THOUGHOUT DEC SOFTWARE (IE:
	RT-11,RSTS/E,ETC.)





	  DEVICE HANDLERS ARE SUBROUTINES WHICH HANDLE DATA TRANSFER TO AND FROM
	PERIFERAL DEVICES. DEVICE HANDLERS FOR THE PARTICULAR HARDWARE SYSTEM
	YOU ARE USING ARE ACTIVATED BY THE PROBGAM "BUILD". THESE SUBROUTINES
	ARE THEN AVAILABLE TO ALL OS-8 PROGRAMS. IT IS THROUGH THE USE OF DEVICE
	HANDLERS THAT A SORT OF "DEVICE INDEPENDENCE" IS ACHIVED.



	  THE USR CONTROLS THE DIRECTORY OPERATIONS OF THE OS-8 SYSTEM INCLUDING
	LOADING DEVICE HANDLERS, SEARCHING FILE DIRECTORIES,CREATING AND CLOSING
	OUTPUT FILES,OPENING INPUT FILES,CALLING THE COMMAND DECODER, AND
	CHAINING PROGRAMS. HOWEVER, ALL OF THIS IS TRANSPARENT TO THE USER, SO
	UNLESS YOU ARE INTERESTED IN WRITTING OPERATING SYSTEM PROGRAMS, DON'T
	WORRY ABOUT IT.



				-  8  -
